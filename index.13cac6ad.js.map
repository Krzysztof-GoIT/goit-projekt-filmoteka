{"mappings":"C,A,S,C,C,C,C,C,C,C,C,C,E,I,E,A,a,O,W,W,A,a,O,K,K,A,a,O,O,O,A,a,O,O,O,C,E,E,A,Y,O,C,C,E,E,C,C,E,C,E,E,K,E,C,E,E,A,a,O,Q,A,Y,O,O,O,E,O,O,C,I,C,Q,S,E,C,C,C,E,G,C,C,C,E,C,C,G,C,C,C,E,C,C,I,E,A,Y,O,C,C,E,E,C,C,E,C,G,C,G,E,O,E,E,C,G,G,E,O,E,E,C,G,G,G,A,U,O,E,O,E,G,I,E,A,M,uB,E,I,O,E,I,C,mB,C,C,E,O,C,S,C,E,I,E,C,C,E,C,E,C,E,C,O,A,M,E,E,C,E,E,K,C,C,E,I,E,C,C,E,C,I,E,M,C,G,C,C,E,C,E,C,I,C,E,O,C,E,E,E,O,C,I,C,C,O,C,C,E,C,O,C,S,E,C,E,I,E,E,O,C,G,M,A,C,I,E,C,E,E,E,C,C,E,e,C,C,E,E,M,C,S,C,E,I,C,E,C,E,I,C,M,C,E,I,C,O,C,C,C,E,E,O,C,E,E,K,C,E,E,M,C,E,E,Q,C,S,C,C,C,E,C,C,E,C,C,S,C,C,C,E,E,O,C,C,E,C,E,A,E,O,c,C,E,O,C,I,W,O,C,C,E,A,C,G,C,C,E,C,E,I,I,E,E,E,E,M,C,I,E,C,C,E,E,G,E,C,I,E,E,E,A,C,U,O,S,A,a,O,O,O,O,C,E,Y,O,Q,O,G,E,O,W,O,C,E,C,E,C,M,C,S,C,C,C,C,C,ECAA,IAAA,EAAA,EAAA,SAEA,SAAS,gBAAgB,CAAC,mBAAoB,KAC5C,IAAM,EAAa,SAAS,cAAc,CAAC,eACrC,EAAc,SAAS,aAAa,CAAC,sBACrC,EAAY,SAAS,cAAc,CAAC,cAE1C,EAAW,gBAAgB,CAAC,SAAU,MAAM,IAC1C,EAAM,cAAc,GACpB,IAAM,EAAc,EAAY,KAAK,CAAC,IAAI,GAC1C,GAAI,EACF,GAAI,CAGF,IAAM,EAAgB,AADL,CAAA,MAAM,AAAA,CAAA,EAAA,EAAA,iBAAgB,AAAhB,EAAkB,EAAa,EAAtD,EAC+B,OAAO,AAGlC,CAAA,EAAc,MAAM,CAAG,GACzB,EAAU,KAAK,CAAC,OAAO,CAAG,OAM1B,AAHyB,SAAS,cAAc,CAAC,qBAGhC,SAAS,CAAG,EAC1B,GAAG,CAAC,AAAA,GAEe,CAAC;iDACgB,EAAE,EAAM,EAAE,CAAC;qDACP,EAAE,EAAM,WAAW,CAAC,OAAO,EAChE,EAAM,KAAK,CACZ;;qCAEsB,EAAE,EAAM,KAAK,CAAC;oCACf,EAAE,EAAU,EAAM,SAAS,EAAE,GAAG,EAAE,EAAM,YAAY,CAAC,KAAK,CAC9E,EACA,GACA;;;QAGR,CAAC,EAGI,IAAI,CAAC,IAIR,AADmB,SAAS,gBAAgB,CAAC,eAClC,OAAO,CAAC,AAAA,IACjB,EAAK,gBAAgB,CAAC,QAAS,UAC7B,IAAM,EAAU,EAAK,OAAO,CAAC,OAAO,CAC9B,EAAe,MAAM,AAAA,CAAA,EAAA,EAAA,iBAAgB,AAAhB,EAAkB,GAC7C,EAAoB,EACtB,EACF,KAEA,EAAU,KAAK,CAAC,OAAO,CAAG,QAC1B,IAEJ,CAAE,MAAO,EAAO,CACd,QAAQ,KAAK,CAAC,gCAAiC,EACjD,CAEJ,EACF,GAGA,IAAM,EAAY,AAAA,GAQT,AANQ,EAAS,GAAG,CAAC,AAAA,IAC1B,IAAM,EAAa,AAAA,CAAA,EAAA,EAAA,UAAU,AAAV,EAAW,IAAI,CAAC,AAAA,GAAS,EAAM,EAAE,GAAK,GACzD,OAAO,EAAa,EAAW,IAAI,CAAG,EACxC,GAGc,IAAI,CAAC,MAIf,EAAsB,AAAA,IAE1B,QAAQ,GAAG,CAAC,EACd,EAEM,EAAe,KAEnB,AADyB,SAAS,cAAc,CAAC,qBAChC,SAAS,CAAG,EAC/B,C,E,C,Q,O,E,E,C,Q,C,Q","sources":["<anon>","src/js/search.js"],"sourcesContent":["// modules are defined as an array\n// [ module function, map of requires ]\n//\n// map of requires is short require name -> numeric require\n//\n// anything defined in a previous bundle is accessed via the\n// orig method which is the require for previous bundles\n\n(function (modules, entry, mainEntry, parcelRequireName, globalName) {\n  /* eslint-disable no-undef */\n  var globalObject =\n    typeof globalThis !== 'undefined'\n      ? globalThis\n      : typeof self !== 'undefined'\n      ? self\n      : typeof window !== 'undefined'\n      ? window\n      : typeof global !== 'undefined'\n      ? global\n      : {};\n  /* eslint-enable no-undef */\n\n  // Save the require from previous bundle to this closure if any\n  var previousRequire =\n    typeof globalObject[parcelRequireName] === 'function' &&\n    globalObject[parcelRequireName];\n\n  var cache = previousRequire.cache || {};\n  // Do not use `require` to prevent Webpack from trying to bundle this call\n  var nodeRequire =\n    typeof module !== 'undefined' &&\n    typeof module.require === 'function' &&\n    module.require.bind(module);\n\n  function newRequire(name, jumped) {\n    if (!cache[name]) {\n      if (!modules[name]) {\n        // if we cannot find the module within our internal map or\n        // cache jump to the current global require ie. the last bundle\n        // that was added to the page.\n        var currentRequire =\n          typeof globalObject[parcelRequireName] === 'function' &&\n          globalObject[parcelRequireName];\n        if (!jumped && currentRequire) {\n          return currentRequire(name, true);\n        }\n\n        // If there are other bundles on this page the require from the\n        // previous one is saved to 'previousRequire'. Repeat this as\n        // many times as there are bundles until the module is found or\n        // we exhaust the require chain.\n        if (previousRequire) {\n          return previousRequire(name, true);\n        }\n\n        // Try the node require function if it exists.\n        if (nodeRequire && typeof name === 'string') {\n          return nodeRequire(name);\n        }\n\n        var err = new Error(\"Cannot find module '\" + name + \"'\");\n        err.code = 'MODULE_NOT_FOUND';\n        throw err;\n      }\n\n      localRequire.resolve = resolve;\n      localRequire.cache = {};\n\n      var module = (cache[name] = new newRequire.Module(name));\n\n      modules[name][0].call(\n        module.exports,\n        localRequire,\n        module,\n        module.exports,\n        this\n      );\n    }\n\n    return cache[name].exports;\n\n    function localRequire(x) {\n      var res = localRequire.resolve(x);\n      return res === false ? {} : newRequire(res);\n    }\n\n    function resolve(x) {\n      var id = modules[name][1][x];\n      return id != null ? id : x;\n    }\n  }\n\n  function Module(moduleName) {\n    this.id = moduleName;\n    this.bundle = newRequire;\n    this.exports = {};\n  }\n\n  newRequire.isParcelRequire = true;\n  newRequire.Module = Module;\n  newRequire.modules = modules;\n  newRequire.cache = cache;\n  newRequire.parent = previousRequire;\n  newRequire.register = function (id, exports) {\n    modules[id] = [\n      function (require, module) {\n        module.exports = exports;\n      },\n      {},\n    ];\n  };\n\n  Object.defineProperty(newRequire, 'root', {\n    get: function () {\n      return globalObject[parcelRequireName];\n    },\n  });\n\n  globalObject[parcelRequireName] = newRequire;\n\n  for (var i = 0; i < entry.length; i++) {\n    newRequire(entry[i]);\n  }\n\n  if (mainEntry) {\n    // Expose entry point to Node, AMD or browser globals\n    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js\n    var mainExports = newRequire(mainEntry);\n\n    // CommonJS\n    if (typeof exports === 'object' && typeof module !== 'undefined') {\n      module.exports = mainExports;\n\n      // RequireJS\n    } else if (typeof define === 'function' && define.amd) {\n      define(function () {\n        return mainExports;\n      });\n\n      // <script>\n    } else if (globalName) {\n      this[globalName] = mainExports;\n    }\n  }\n})({\"bwI1H\":[function(require,module,exports) {\nvar _api = require(\"./api\");\ndocument.addEventListener(\"DOMContentLoaded\", ()=>{\n    const searchForm = document.getElementById(\"search-form\");\n    const searchInput = document.querySelector(\".search-form input\");\n    const notResult = document.getElementById(\"not-result\");\n    searchForm.addEventListener(\"submit\", async (event)=>{\n        event.preventDefault();\n        const searchQuery = searchInput.value.trim();\n        if (searchQuery) try {\n            // Pobranie wyników wyszukiwania\n            const response = await (0, _api.fetchSearchMovies)(searchQuery, 1);\n            const searchResults = response.results;\n            // Sprawdzenie czy są wyniki wyszukiwania\n            if (searchResults.length > 0) {\n                notResult.style.display = \"none\"; // Ukrycie komunikatu o braku wyników\n                // Znalezienie kontenera dla galerii filmów\n                const galleryContainer = document.getElementById(\"gallery-container\");\n                // Wyświetlenie filmów\n                galleryContainer.innerHTML = searchResults.map((movie)=>{\n                    // Utworzenie elementu karty filmu\n                    const movieCard = `\n          <div class=\"movie-card\" data-movie-id=\"${movie.id}\">\n            <img src=\"https://image.tmdb.org/t/p/w500${movie.poster_path}\" alt=\"${movie.title}\" class=\"movie-poster\">\n            <div class=\"movie-details\">\n              <p class=\"movie-title\">${movie.title}</p>\n              <p class=\"movie-info\">${getGenres(movie.genre_ids)} | ${movie.release_date.slice(0, 4)}</p>\n            </div>\n          </div>\n        `;\n                    return movieCard;\n                }).join(\"\");\n                // Dodanie obsługi zdarzenia kliknięcia dla każdej karty filmu\n                const movieCards = document.querySelectorAll(\".movie-card\");\n                movieCards.forEach((card)=>{\n                    card.addEventListener(\"click\", async ()=>{\n                        const movieId = card.dataset.movieId;\n                        const movieDetails = await (0, _api.fetchMovieDetails)(movieId);\n                        displayMovieDetails(movieDetails);\n                    });\n                });\n            } else {\n                notResult.style.display = \"block\"; // Wyświetlenie komunikatu o braku wyników\n                clearGallery(); // Wyczyszczenie galerii\n            }\n        } catch (error) {\n            console.error(\"Error fetching search movies:\", error);\n        }\n    });\n});\n// Funkcja pomocnicza do pobrania nazw gatunków na podstawie ich identyfikatorów\nconst getGenres = (genreIds)=>{\n    // Pobranie nazw gatunków z listy genresName zdefiniowanej w api.js\n    const genres = genreIds.map((genreId)=>{\n        const foundGenre = (0, _api.genresName).find((genre)=>genre.id === genreId);\n        return foundGenre ? foundGenre.name : \"\";\n    });\n    // Zwrócenie połączonej listy gatunków\n    return genres.join(\", \");\n};\n// Funkcja do wyświetlania szczegółowych informacji o filmie w modalu\nconst displayMovieDetails = (movieDetails)=>{\n    // Tutaj możemy zaimplementować logikę wyświetlania informacji o filmie w modalu\n    console.log(movieDetails);\n};\nconst clearGallery = ()=>{\n    const galleryContainer = document.getElementById(\"gallery-container\");\n    galleryContainer.innerHTML = \"\"; // Wyczyszczenie zawartości galerii\n};\n\n},{\"./api\":\"8Akdd\"}]},[\"bwI1H\"], \"bwI1H\", \"parcelRequire4e2a\")\n\n//# sourceMappingURL=index.13cac6ad.js.map\n","import { fetchSearchMovies, fetchMovieDetails, genresName } from './api';\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  const searchForm = document.getElementById('search-form');\n  const searchInput = document.querySelector('.search-form input');\n  const notResult = document.getElementById('not-result');\n\n  searchForm.addEventListener('submit', async event => {\n    event.preventDefault();\n    const searchQuery = searchInput.value.trim();\n    if (searchQuery) {\n      try {\n        // Pobranie wyników wyszukiwania\n        const response = await fetchSearchMovies(searchQuery, 1);\n        const searchResults = response.results;\n\n        // Sprawdzenie czy są wyniki wyszukiwania\n        if (searchResults.length > 0) {\n          notResult.style.display = 'none'; // Ukrycie komunikatu o braku wyników\n\n          // Znalezienie kontenera dla galerii filmów\n          const galleryContainer = document.getElementById('gallery-container');\n\n          // Wyświetlenie filmów\n          galleryContainer.innerHTML = searchResults\n            .map(movie => {\n              // Utworzenie elementu karty filmu\n              const movieCard = `\n          <div class=\"movie-card\" data-movie-id=\"${movie.id}\">\n            <img src=\"https://image.tmdb.org/t/p/w500${movie.poster_path}\" alt=\"${\n                movie.title\n              }\" class=\"movie-poster\">\n            <div class=\"movie-details\">\n              <p class=\"movie-title\">${movie.title}</p>\n              <p class=\"movie-info\">${getGenres(movie.genre_ids)} | ${movie.release_date.slice(\n                0,\n                4,\n              )}</p>\n            </div>\n          </div>\n        `;\n              return movieCard;\n            })\n            .join('');\n\n          // Dodanie obsługi zdarzenia kliknięcia dla każdej karty filmu\n          const movieCards = document.querySelectorAll('.movie-card');\n          movieCards.forEach(card => {\n            card.addEventListener('click', async () => {\n              const movieId = card.dataset.movieId;\n              const movieDetails = await fetchMovieDetails(movieId);\n              displayMovieDetails(movieDetails);\n            });\n          });\n        } else {\n          notResult.style.display = 'block'; // Wyświetlenie komunikatu o braku wyników\n          clearGallery(); // Wyczyszczenie galerii\n        }\n      } catch (error) {\n        console.error('Error fetching search movies:', error);\n      }\n    }\n  });\n});\n\n// Funkcja pomocnicza do pobrania nazw gatunków na podstawie ich identyfikatorów\nconst getGenres = genreIds => {\n  // Pobranie nazw gatunków z listy genresName zdefiniowanej w api.js\n  const genres = genreIds.map(genreId => {\n    const foundGenre = genresName.find(genre => genre.id === genreId);\n    return foundGenre ? foundGenre.name : '';\n  });\n\n  // Zwrócenie połączonej listy gatunków\n  return genres.join(', ');\n};\n\n// Funkcja do wyświetlania szczegółowych informacji o filmie w modalu\nconst displayMovieDetails = movieDetails => {\n  // Tutaj możemy zaimplementować logikę wyświetlania informacji o filmie w modalu\n  console.log(movieDetails);\n};\n\nconst clearGallery = () => {\n  const galleryContainer = document.getElementById('gallery-container');\n  galleryContainer.innerHTML = ''; // Wyczyszczenie zawartości galerii\n};\n"],"names":["modules","entry","mainEntry","parcelRequireName","globalName","globalObject","globalThis","self","window","global","previousRequire","cache","nodeRequire","module","require","bind","newRequire","name","jumped","currentRequire","err","Error","code","localRequire","resolve","x","id","Module","call","exports","res","isParcelRequire","moduleName","bundle","parent","register","Object","defineProperty","get","i","length","mainExports","define","amd","_api","document","addEventListener","searchForm","getElementById","searchInput","querySelector","notResult","event","preventDefault","searchQuery","value","trim","searchResults","response","fetchSearchMovies","results","style","display","galleryContainer","innerHTML","map","movie","poster_path","title","getGenres","genre_ids","release_date","slice","join","movieCards","querySelectorAll","forEach","card","movieId","dataset","movieDetails","fetchMovieDetails","displayMovieDetails","clearGallery","error","console","genreIds","genres","genreId","foundGenre","genresName","find","genre","log"],"version":3,"file":"index.13cac6ad.js.map"}